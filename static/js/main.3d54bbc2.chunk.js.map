{"version":3,"sources":["components/random.js","components/searcharticle.js","App.js","serviceWorker.js","index.js"],"names":["RandomArticle","styled","div","RandomWiki","as","href","target","React","Component","InputDiv","StyledAnchor","a","ArticleDiv","StyledParagraph","p","StyledInput","input","attrs","type","SearchArticle","props","handleChange","event","targetEvent","value","setState","inputVal","handleSubmit","req","state","axios","get","then","res","article","data","articles","console","log","preventDefault","bind","this","Fragment","onSubmit","onChange","map","item","content_urls","desktop","page","rel","title","extract","StyledRow","Row","App","Container","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sjBAGA,IAAMA,EAAgBC,IAAOC,IAAV,KAeEC,E,uKAEb,OACI,kBAACH,EAAD,CACII,GAAG,IACHC,KAAK,+CACLC,OAAO,UAHX,uC,GAH4BC,IAAMC,W,02BCd9C,IAAMC,EAAWR,IAAOC,IAAV,KAKRQ,EAAeT,IAAOU,EAAV,KAIZC,EAAaX,IAAOC,IAAV,KAQVW,EAAkBZ,IAAOa,EAAV,KAMfC,EAAcd,IAAOe,MAAMC,MAAM,CACnCC,KAAM,QADUjB,CAAH,KAeIkB,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAWVC,aAAe,SAACC,GACZ,IAAIC,EAAcD,EAAMhB,OAAOkB,MAC/B,EAAKC,SAAS,CACVC,SAAUH,KAfC,EAmBnBI,aAAe,SAACL,GACZ,IACIM,EAAM,qDADM,EAAKC,MAAMH,SAG3BI,IAAMC,IAAIH,GACTI,MAAK,SAAAC,GACJ,IAAMC,EAAUD,EAAIE,KACrB,EAAKV,SAAS,CAAEW,SAAS,GAAD,mBAAM,EAAKP,MAAMO,UAAjB,CAA2BF,MAAY,WAAOG,QAAQC,IAAI,EAAKT,MAAMO,gBAG9Fd,EAAMiB,kBA1BN,EAAKV,MAAQ,CACTH,SAAU,GACVU,SAAU,IAGd,EAAKf,aAAe,EAAKA,aAAamB,KAAlB,gBACpB,EAAKb,aAAe,EAAKA,aAAaa,KAAlB,gBATL,E,qDAiCf,IAAIN,EAAUO,KAAKZ,MAAMO,SACzB,OACI,kBAAC,IAAMM,SAAP,KACI,kBAACjC,EAAD,KACI,0BAAMkC,SAAUF,KAAKd,cACjB,kBAACZ,EAAD,CAAa6B,SAAUH,KAAKpB,aAAcG,MAAOiB,KAAKZ,MAAMH,YAEhE,kBAACb,EAAD,kCAEHqB,EAAQW,KAAI,SAACC,GAAD,OACT,kBAACpC,EAAD,CAAcL,KAAMyC,EAAKC,aAAaC,QAAQC,KAAM3C,OAAO,SAAS4C,IAAI,uBACpE,kBAACtC,EAAD,KACI,4BAAKkC,EAAKK,OACV,2BAAIL,EAAKM,mB,GA/CM7C,IAAMC,W,+KChCjD,IAAM6C,EAAYpD,YAAOqD,IAAPrD,CAAH,KAOMsD,E,uKAEjB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACH,EAAD,KACE,kBAACI,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,a,GAPqBlD,IAAMC,WCLnBkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.3d54bbc2.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst RandomArticle = styled.div `\r\n  color: white;\r\n  font-size: 1em;\r\n  text-align: center;\r\n  display: block;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    color: white;\r\n    text-decoration: none;\r\n  }\r\n  \r\n`;\r\n\r\nexport default class RandomWiki extends React.Component {\r\n    render() {\r\n        return (\r\n            <RandomArticle \r\n                as=\"a\" \r\n                href=\"https://en.wikipedia.org/wiki/Special:Random\" \r\n                target=\"_blank\">\r\n                Click here for a random article\r\n            </RandomArticle>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\nconst InputDiv = styled.div `\r\n    text-align: center;\r\n    margin-top: 1em;\r\n`;\r\n\r\nconst StyledAnchor = styled.a `\r\n    text-decoration: none !important;\r\n`;\r\n\r\nconst ArticleDiv = styled.div `\r\n    color: white;\r\n    text-align: left;\r\n    background-color: grey;\r\n    border: 1px solid white;\r\n    margin-bottom: 1em;\r\n`;\r\n\r\nconst StyledParagraph = styled.p `\r\n    color: white;\r\n    text-align: center;\r\n    margin-top: 1em;\r\n`;\r\n\r\nconst StyledInput = styled.input.attrs({\r\n    type: \"text\"\r\n})`\r\n    margin: auto;\r\n    border: 4px solid orange;\r\n    background-color: transparent;\r\n    border-radius: 25px;\r\n    color: white;\r\n    padding: 3px 1em;\r\n\r\n    &:focus {\r\n        outline: 5px white;\r\n    } \r\n`;\r\n\r\nexport default class SearchArticle extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputVal: \"\",\r\n            articles: []\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        let targetEvent = event.target.value;\r\n        this.setState({\r\n            inputVal: targetEvent\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        let searchExp = this.state.inputVal;\r\n        let req = 'https://en.wikipedia.org/api/rest_v1/page/summary/'+ searchExp;\r\n        \r\n        axios.get(req)\r\n        .then(res => {\r\n          const article = res.data;\r\n         this.setState({ articles: [...this.state.articles, article] }, () => {console.log(this.state.articles)});\r\n        })\r\n    \r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        let article = this.state.articles;\r\n        return (\r\n            <React.Fragment>\r\n                <InputDiv>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <StyledInput onChange={this.handleChange} value={this.state.inputVal} />\r\n                    </form>\r\n                    <StyledParagraph>Type something to search</StyledParagraph>\r\n                </InputDiv>\r\n                {article.map((item) => \r\n                    <StyledAnchor href={item.content_urls.desktop.page} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <ArticleDiv>\r\n                            <h1>{item.title}</h1>\r\n                            <p>{item.extract}</p>\r\n                    </ArticleDiv>\r\n                    </StyledAnchor>\r\n                )} \r\n            </React.Fragment>   \r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport RandomWiki from './components/random';\r\nimport SearchArticle from './components/searcharticle';\r\n\r\nconst StyledRow = styled(Row) `\r\n  height: 100vh !important;\r\n  align-items: center !important; \r\n  justify-content: center !important;\r\n`;\r\n\r\n\r\nexport default class App extends React.Component {\r\n  render () {\r\n    return (\r\n      <Container>\r\n        <StyledRow>\r\n          <Col>\r\n            <RandomWiki />\r\n            <SearchArticle />\r\n          </Col>\r\n        </StyledRow>\r\n      </Container>\r\n      );\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}